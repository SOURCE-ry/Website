{"version":3,"sources":["webpack:///./src/components/PartnersWidget.tsx","webpack:///./src/templates/page.tsx"],"names":["PartnerItem","logo","url","className","href","src","childImageSharp","original","PartnersWidget","query","render","allStrapiPartner","edges","map","partner","key","node","name","PageTemplate","strapiPage","data","finskTranslation","translations","filter","t","language","isImage","banner","bannerURL","childVideoFfmpeg","transcode","style","backgroundImage","title","body","hasWidgets"],"mappings":"kPAyBA,IAAMA,EAAsC,SAAC,GAAkB,IAAhBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IACnD,OACE,uBAAGC,UAAU,sBAAsBC,KAAMF,GACvC,yBAAKG,IAAKJ,EAAKK,gBAAgBC,SAASF,QAgD/BG,EA3CQ,SAAC,GACtB,O,2EAD6B,IAE3B,kBAAC,IAAD,CACEC,MAAK,aAqBLC,OAAQ,gBAAGC,EAAH,EAAGA,iBAAH,OACN,oCACE,wBAAIR,UAAU,kBAAd,wBAGA,yBAAKA,UAAU,2BAEXQ,EAAiBC,MAAMC,KAAI,SAACC,GAC1B,OAAO,kBAAC,EAAD,eAAaC,IAAKD,EAAQE,KAAKC,MAAUH,EAAQE,aA9BpE,UC6BSP,GAFES,UA9BmC,SAAC,GAA6B,IAAnBC,EAAmB,EAA3BC,KAAQD,WAErDE,EAAmBF,EAAWG,aAAaC,QAAO,SAAAC,GAAC,MAAmB,OAAfA,EAAEC,YAAmB,GAE5EC,IAAYP,EAAWQ,OAAOrB,gBAC9BsB,EAAYT,EAAWQ,OAAOrB,gBAClCa,EAAWQ,OAAOrB,gBAAgBC,SAASF,IACzCc,EAAWQ,OAAOE,iBAAiBC,UAAUzB,IAEjD,OACE,gBAAC,IAAD,KACE,uBAAKF,UAAU,yBACb,uBAAKA,UAAWuB,EAAU,qBAAuB,cAC/CK,MAAO,CAAEC,gBAAiB,QAAON,EAAUE,EAAY,IAA/B,MACrBF,EAAsC,iCAA5B,yBAAOrB,IAAKuB,KAE3B,sBAAIzB,UAAU,cAAckB,EAAiBY,QAE/C,gBAAC,IAAD,CAAe9B,UAAW,aACvBkB,EAAiBa,MAGlBf,EAAWgB,WACX,gBAAC,EAAD,MACE,mCAQW,e","file":"component---src-templates-page-tsx-f3fca232e8b4fe7bda26.js","sourcesContent":["import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\n\ninterface PartnerProps {\n  logo: {\n    childImageSharp: {\n      original: {\n        src: string;\n      }\n    }\n  };\n  name: string;\n  basicInfo: string;\n  url: string;\n  accentColor: string;\n}\n\ninterface PartnersProps {\n  allStrapiPartner: {\n    edges: {\n      node: PartnerProps\n    }[]\n  }\n}\n\nconst PartnerItem: React.FC<PartnerProps> = ({ logo, url }) => {\n  return (\n    <a className='partner-widget-item' href={url}>\n      <img src={logo.childImageSharp.original.src} />\n    </a>\n  )\n}\n\nconst PartnersWidget = ({}) => {\n  return (\n    <StaticQuery\n      query={graphql`\n        query PartnersWidgetQuery {\n          allStrapiPartner {\n            edges {\n              node {\n                logo {\n                  childImageSharp {\n                    original {\n                      src\n                    }\n                  }\n                }\n                basicInfo\n                name\n                url\n                accentColor\n              }\n            } \n          }\n        }\n      `}\n      render={({ allStrapiPartner }: PartnersProps) => (\n        <>\n          <h1 className='partners-title'>\n            Yhteisty√∂kumppanimme\n          </h1>\n          <div className='partner-widget-partners'>\n            {\n              allStrapiPartner.edges.map((partner) => {\n                return <PartnerItem key={partner.node.name} {...partner.node} />\n              })\n            }\n          </div>\n        </>\n\n      )}\n    />\n  )\n}\n\nexport default PartnersWidget\n\n","import * as React from 'react';\nimport { graphql } from 'gatsby';\nimport ReactMarkdown from 'react-markdown';\nimport IndexLayout from '../layouts';\nimport PartnersWidget from '../components/PartnersWidget'\n\n\ninterface PageTemplateProps {\n  data: {\n    strapiPage: {\n      hasWidgets: boolean;\n      banner: {\n        childImageSharp: {\n          original: {\n            src: string;\n          }\n        };\n        childVideoFfmpeg: {\n          transcode: {\n            src: string;\n          }\n        };\n      };\n      translations: {\n        title: string;\n        body: string;\n        language: 'FI' | 'EN';\n      }[];\n    }\n  }\n}\n\nconst PageTemplate: React.FC<PageTemplateProps> = ({ data: { strapiPage } }) => {\n  /* TODO: implement localization */\n  const finskTranslation = strapiPage.translations.filter(t => t.language === 'FI')[0];\n\n  const isImage = !!strapiPage.banner.childImageSharp;\n  const bannerURL = strapiPage.banner.childImageSharp ?\n    strapiPage.banner.childImageSharp.original.src\n    : strapiPage.banner.childVideoFfmpeg.transcode.src;\n\n  return (\n    <IndexLayout>\n      <div className=\"page-banner-container\">\n        <div className={isImage ? \"page-banner filter\" : \"page-banner\"} \n          style={{ backgroundImage: `url(${isImage ? bannerURL : ''})` }}>\n          { !isImage ? <video src={bannerURL} /> : <></> }\n        </div>\n        <h1 className=\"page-title\">{finskTranslation.title}</h1>\n      </div>\n      <ReactMarkdown className={'page-text'}>\n        {finskTranslation.body}\n      </ReactMarkdown>\n      {\n        strapiPage.hasWidgets ?\n        <PartnersWidget />\n        : <></>\n      }\n    </IndexLayout>\n  );\n};\n\nexport default PageTemplate;\n\nexport const query = graphql`\n  query PageTemplateQuery($url: String!) {\n    strapiPage( url: { eq: $url }) {\n      hasWidgets\n      banner {\n        childImageSharp {\n          original {\n            src\n          }\n        }\n        childVideoFfmpeg {\n          transcode {\n            src\n          }\n        }\n      }\n      translations {\n        title\n        body\n        language\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}